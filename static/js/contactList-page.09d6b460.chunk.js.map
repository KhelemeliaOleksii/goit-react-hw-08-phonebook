{"version":3,"file":"static/js/contactList-page.09d6b460.chunk.js","mappings":"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","sources":["Components/ContactItem/ContactItem.js","Components/ContactList/ContactList.js","Components/ContactForm/ContactForm.js","Components/ContactFilter/ContactFilter.js","Views/ContactsView/ContactsView.js"],"sourcesContent":["import ListItem from '@mui/material/ListItem'\nimport ListItemButton from '@mui/material/ListItemButton'\nimport ListItemAvatar from '@mui/material/ListItemAvatar'\nimport ListItemText from '@mui/material/ListItemText'\nimport Button from '@mui/material/Button'\nimport Avatar from '@mui/material/Avatar'\nimport PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\nimport { contactsOperations } from '../../redux/contacts'\nimport notifier from 'services/notify/notify'\n\nexport default function ContactItem({ contact }) {\n    const { id, name, number } = contact;\n    const dispatch = useDispatch();\n    const isButtonDeleteDisabled = false;\n    const handlerOnClickDelete = (id) => {\n        dispatch(contactsOperations.deleteContact(id));\n        notifier.success(\"Contact is removed\");\n    }\n\n    return (\n        <ListItem >\n            <ListItemButton>\n                <ListItemAvatar>\n                    <Avatar {...stringAvatar(name)} />\n                </ListItemAvatar>\n                <ListItemText primary={name} secondary={number} />\n                <Button variant=\"contained\" onClick={() => handlerOnClickDelete(id)} disabled={isButtonDeleteDisabled}>Delete</Button>\n            </ListItemButton>\n        </ListItem>\n    )\n}\n\nContactItem.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    })\n}\n\nfunction stringAvatar(name) {\n    const extrudeFirstLetters = () => {\n        const words = name.split(\" \");\n        const cortege = words.map((item) => item[0]).join('');\n        return cortege;\n\n    };\n    const randomColor = Math.floor(Math.random() * 16777215).toString(16);\n\n    return {\n        sx: {\n            bgcolor: `#${randomColor}`,\n        },\n        children: `${extrudeFirstLetters()}`,\n    };\n}","import Box from '@mui/material/Box';\nimport List from '@mui/material/List';\n\nimport ContactItem from \"../ContactItem\";\nimport { useSelector } from 'react-redux';\nimport { contactsSelectors } from \"../../redux/contacts\";\n\nexport default function ContactList() {\n    const contactsToShow = useSelector(contactsSelectors.getContactsToShow);\n    const isContactExist = !!contactsToShow && contactsToShow.length > 0;\n\n    return (\n        <>\n            {\n                isContactExist ?\n                    <Box sx={{ width: '100%' }}>\n                        <List dense x={{ width: '100%' }}>\n                            {contactsToShow.map((item) => {\n                                return (\n                                    <ContactItem key={item.id} contact={item} />\n                                )\n                            })}\n                        </List>\n                    </Box>\n                    :\n                    <p>The contact list is empty</p>\n            }\n        </>\n    )\n}\n\n","import { createTheme, ThemeProvider } from \"@mui/material\";\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button'\n\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\nimport contactsSelectors from \"../../redux/contacts/contacts-selectors\";\nimport notifier from \"../../services/notify/notify\";\n\nexport default function ContactForm() {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const dispatch = useDispatch()\n\n    const contacts = useSelector(contactsSelectors.getContacts);\n    const isContactsContainName = contacts.find((item) => item.name === name);\n    const isCorrectValue = (value) => {\n        if (value.trim() === '') {\n            return false;\n        }\n        return true;\n    }\n    const handlerOnSubmit = (event) => {\n        event.preventDefault();\n\n        if (!isCorrectValue(name) || !isCorrectValue(number)) {\n            reset();\n            return\n        }\n\n        if (isContactsContainName) {\n            notifier.info(`Contact with name ${name} already exists!`)\n        } else {\n            dispatch(contactsOperations.addContact({ name, number }));\n            notifier.success(`Contact with name ${name} add to list!`)\n        }\n        reset();\n    }\n    const handlerOnChange = ({ target: { name, value } }) => {\n        switch (name) {\n            case 'name':\n                return setName(value);\n            case 'number':\n                return setNumber(value);\n            default:\n                return;\n        }\n    }\n    const reset = () => {\n        setName('');\n        setNumber('');\n    }\n    const theme = createTheme();\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component='main' maxWidth='lg'>\n                <CssBaseline />\n                <Box component=\"form\" onSubmit={handlerOnSubmit} validate sx={{ mt: 1 }}>\n                    <TextField\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"name\"\n                        label=\"Name\"\n                        name=\"name\"\n                        type='text'\n                        value={name}\n                        autoFocus\n                        onChange={handlerOnChange}\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        inputProps={{\n                            pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n                        }}\n                    />\n                    <TextField\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"number\"\n                        label=\"Number\"\n                        type=\"tel\"\n                        id=\"number\"\n                        value={number}\n                        onChange={handlerOnChange}\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        inputProps={{ pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\" }}\n                    // inputProps={{ pattern: \"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\" }}\n\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        sx={{ mt: 3, mb: 2 }}\n                    >\n                        Add contact\n                    </Button>\n                </Box>\n            </Container>\n        </ThemeProvider>\n\n    )\n    // return (\n    //     <form autoComplete=\"off\" onSubmit={handlerOnSubmit}>\n    //         <label htmlFor=\"contactNameId\"> Name\n    //             <input\n    //                 type=\"text\"\n    //                 id=\"contactNameId\"\n    //                 value={name}\n    //                 name='name'\n    //                 onChange={handlerOnChange}\n    //                 required\n    //                 pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //                 title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    //             />\n    //         </label>\n    //         <label htmlFor=\"contactNumberId\">\n    //             Phone number\n    //             <input\n    //                 type=\"tel\"\n    //                 id=\"contactNumberId\"\n    //                 value={number}\n    //                 name='number'\n    //                 onChange={handlerOnChange}\n    //                 required\n    //                 pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n    //                 title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n    //             />\n    //         </label>\n    //         <button type=\"submit\">Add contact</button>\n    //     </form>\n    // )\n\n}\n\n\n","import { useDispatch, useSelector } from 'react-redux'\nimport { contactsSelectors } from \"../../redux/contacts\";\nimport { filterAction } from \"../../redux/contacts/contacts-slice\";\nimport {\n    ThemeProvider,\n    Box,\n    Container,\n    CssBaseline,\n    TextField,\n    createTheme\n} from '@mui/material';\nexport default function ContactFilter() {\n    const dispatch = useDispatch();\n    const filter = useSelector(contactsSelectors.getFilter);\n    // const [filter, setFilter] = useState('');\n    const handlerOnChange = ({ target: { value } }) => {\n        // setFilter(value);\n        dispatch(filterAction(value));\n    }\n    const theme = createTheme();\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component='main' maxWidth='lg'>\n                <CssBaseline />\n                <Box sx={{ mt: 1 }}>\n                    <TextField\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"contactFilter\"\n                        label=\"Filter\"\n                        name=\"filter\"\n                        type='text'\n                        value={filter}\n                        onChange={handlerOnChange}\n                    />\n                </Box>\n            </Container>\n        </ThemeProvider>\n\n    )\n    // return (\n    //     <>\n    //         <label htmlFor=\"contactFilterId\">\n    //             Search by name\n    //             <input\n    //                 type='text'\n    //                 id=\"contactFilterId\"\n    //                 name=\"contactFilter\"\n    //                 value={filter}\n    //                 onChange={handlerOnChange}\n    //                 pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //                 title=\"Search by name\"\n    //                 required\n    //             />\n    //         </label>\n    //     </>\n    // )\n}","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { contactsOperations } from '../../redux/contacts';\nimport ContactList from \"../../Components/ContactList/ContactList\";\nimport ContactForm from \"../../Components/ContactForm/ContactForm\";\nimport ContactFilter from \"../../Components/ContactFilter\";\nimport { authSelectors } from '../../redux/auth';\n\nexport default function ContactsView() {\n    const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\n    const dispatch = useDispatch()\n    useEffect(() => {\n        // if (isLoggedIn) {\n        dispatch(contactsOperations.getContact())\n        // }\n    }, [dispatch]);\n    return isLoggedIn ?\n        (\n            <>\n                <h1>Phonebook</h1>\n                <ContactForm />\n                <h2>Contacts</h2>\n                <ContactFilter />\n                <ContactList />\n            </>\n        )\n        : (<div>You are not loggined</div>)\n}\n"],"names":["ContactItem","contact","id","name","number","dispatch","useDispatch","ListItem","ListItemButton","ListItemAvatar","Avatar","stringAvatar","ListItemText","primary","secondary","Button","variant","onClick","contactsOperations","notifier","handlerOnClickDelete","disabled","randomColor","Math","floor","random","toString","sx","bgcolor","children","split","map","item","join","ContactList","contactsToShow","useSelector","contactsSelectors","isContactExist","length","Box","width","List","dense","x","ContactForm","useState","setName","setNumber","isContactsContainName","find","isCorrectValue","value","trim","handlerOnChange","target","reset","theme","createTheme","ThemeProvider","Container","component","maxWidth","CssBaseline","onSubmit","event","preventDefault","validate","mt","TextField","margin","required","fullWidth","label","type","autoFocus","onChange","title","inputProps","pattern","mb","ContactFilter","filter","filterAction","ContactsView","isLoggedIn","authSelectors","useEffect"],"sourceRoot":""}